#!/usr/bin/env node

// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// karma is an minimal interface example for a node js viewserver

let readline = require('readline')
const fs = require('fs')

process.stdout.write('["log", "Starting karma event server"]\n')

let logFile = fs.createWriteStream('/couchdb/karma.log', { flags: 'w' })
let errorLogFile = fs.createWriteStream('/couchdb/karma.error.log', { flags: 'w' })

let rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false })

let funs = []

rl.on('line', (line) => {
  // logFile.write(line)
  // logFile.write('\n')
  let parLine
  try {
    parLine = JSON.parse(line)
  } catch (e) {
    errorLogFile.write(line)
    errorLogFile.write('\n')
    return
  }

  if (typeof parLine !== 'object' || parLine.length < 1) {
    errorLogFile.write(line)
    errorLogFile.write('\n')
    return
  }

  switch(parLine[0]) {
    case 'reset':
      funs = []
      // ["reset",{"reduce_limit":false,"timeout":5000}]\n
      process.stdout.write('true\n')
      break
    case 'add_fun':
      funs.push()
      // ["add_fun", "function (doc) { emit(doc._id, 1) }"]\n
      process.stdout.write('true\n')
      break
    case 'map_doc':
      // ["map_doc",{"_id":"a9d6fa19087924b828a624a0750022d7","_rev":"3-04bcd92f74253a8a6f191c69d83db540","test":"a22df"}]
      process.stdout.write('[[[null, {"player_name":"John Smith"}]]]\n')
    default:
      // reduce rereduce
      process.stdout.write('[true,[33]]\n')
  }
})